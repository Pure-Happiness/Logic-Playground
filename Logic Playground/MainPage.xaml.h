#pragma once

#include "MainPage.g.h"

namespace winrt::Logic_Playground::implementation
{
	struct MainPage : MainPageT<MainPage>
	{
		void Self(MainPageP CR _self);
		[[nodiscard]] TabViewItem Position() const;
		void Position(TabViewItem CR _position);
		void Parent(MainPageP CR _parent);
		[[nodiscard]] FileRootP Root() const;
		void Root(FileRootP CR _root);
		[[nodiscard]] hstring Header() const;
		void Header(param::hstring CR _header);
		void InitAsAssume(TheoremP CR _assumption, TheoremPanelP CR _panel);
		void InitAsArbitraryO(ObjP CR _aO);
		void InitAsArbitraryT(TypeP CR _aT);
		OperationP ParseOperation(param::hstring CR str);
		OperationP RedoOperation(OperationP CR operation);
		void RemoveObject(param::hstring CR _name);
		void RemoveType(param::hstring CR _name);
		void RemoveTheorem(param::hstring CR _name);
		void RemoveScope() const;
		void RemoveExport(param::hstring CR _name);
		void RemoveExit();
		void AddTheorem(TheoremP CR theorem, TheoremPanelP CR panel);
		void RemoveScope2(param::hstring CR _name);
		[[nodiscard]] IVectorView<MainPageP> Children() const;
		[[nodiscard]] UIElementCollection Path();
		[[nodiscard]] LinkedMapP Objects() const;
		[[nodiscard]] LinkedMapP Types() const;
		[[nodiscard]] LinkedMapP Theorems() const;
		void Display() const;
		fire_and_forget Display(UIElement _item);
		void ShowError();

		void MoveToParent(IInspectable CR, RoutedEventArgs CR) const;
		void ParentMiddleClick(IInspectable CR, PointerRoutedEventArgs CR args);
		void ParentRightClick(IInspectable CR, RightTappedRoutedEventArgs CR);
		void OpenSettings(IInspectable CR, RoutedEventArgs CR) const;
		void SaveClick(IInspectable CR, RoutedEventArgs CR) const;
		void SaveAsClick(IInspectable CR, RoutedEventArgs CR) const;
		void UndoClick(IInspectable CR, RoutedEventArgs CR) const;
		void RedoClick(IInspectable CR, RoutedEventArgs CR) const;
		void OperationCategoryChosen(IInspectable CR, SelectionChangedEventArgs CR);
		void AliasesOperationCategoryChosen(IInspectable CR, SelectionChangedEventArgs CR);
		void ObjectNameChanged(IInspectable CR, TextChangedEventArgs CR);
		void ObjectNameFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void ObjectExpressionChanged(IInspectable CR, TextChangedEventArgs CR);
		void ObjectExpressionFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void ObjectConfirm(IInspectable CR, RoutedEventArgs CR);
		void TypeNameChanged(IInspectable CR, TextChangedEventArgs CR);
		void TypeNameFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void TypeExpressionChanged(IInspectable CR, TextChangedEventArgs CR);
		void TypeExpressionFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void TypeConfirm(IInspectable CR, RoutedEventArgs CR);
		void CopyNewChanged(IInspectable CR, TextChangedEventArgs CR);
		void CopyNewFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void CopyOriginalChanged(IInspectable CR, TextChangedEventArgs CR);
		void CopyOriginalFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void CopyConfirm(IInspectable CR, RoutedEventArgs CR);
		void FTOperationCategoryChosen(IInspectable CR, SelectionChangedEventArgs CR);
		void FunctionTheoremNameChanged(IInspectable CR, TextChangedEventArgs CR);
		void FunctionTheoremNameFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void FunctionParameterNameChanged(IInspectable CR, TextChangedEventArgs CR);
		void FunctionParameterNameFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void FunctionImageExpressionChanged(IInspectable CR, TextChangedEventArgs CR);
		void FunctionImageExpressionFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void FunctionArgumentExpressionChanged(IInspectable CR, TextChangedEventArgs CR);
		void FunctionArgumentExpressionFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void FunctionConfirm(IInspectable CR, RoutedEventArgs CR);
		void TemplateTheoremNameChanged(IInspectable CR, TextChangedEventArgs CR);
		void TemplateTheoremNameFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void TemplateParameterNameChanged(IInspectable CR, TextChangedEventArgs CR);
		void TemplateParameterNameFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void TemplateImageExpressionChanged(IInspectable CR, TextChangedEventArgs CR);
		void TemplateImageExpressionFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void TemplateArgumentExpressionChanged(IInspectable CR, TextChangedEventArgs CR);
		void TemplateArgumentExpressionFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void TemplateConfirm(IInspectable CR, RoutedEventArgs CR);
		void EqualityOperationCategoryChosen(IInspectable CR, SelectionChangedEventArgs CR);
		void EITheoremNameChanged(IInspectable CR, TextChangedEventArgs CR);
		void EITheoremNameFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void EIObjectChanged(IInspectable CR, TextChangedEventArgs CR);
		void EIObjectFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void EIConfirm(IInspectable CR, RoutedEventArgs CR);
		void EIBTheoremNameChanged(IInspectable CR, TextChangedEventArgs CR);
		void EIBTheoremNameFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void EIBReasonNameChanged(IInspectable CR, TextChangedEventArgs CR);
		void EIBReasonNameFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void EIBConfirm(IInspectable CR, RoutedEventArgs CR);
		void EIFTheoremNameChanged(IInspectable CR, TextChangedEventArgs CR);
		void EIFTheoremNameFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void EIFReasonNameChanged(IInspectable CR, TextChangedEventArgs CR);
		void EIFReasonNameFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void EIFConfirm(IInspectable CR, RoutedEventArgs CR);
		void EITTheoremNameChanged(IInspectable CR, TextChangedEventArgs CR);
		void EITTheoremNameFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void EITReasonNameChanged(IInspectable CR, TextChangedEventArgs CR);
		void EITReasonNameFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void EITConfirm(IInspectable CR, RoutedEventArgs CR);
		void EETheoremNameChanged(IInspectable CR, TextChangedEventArgs CR);
		void EETheoremNameFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void EEReasonNameChanged(IInspectable CR, TextChangedEventArgs CR);
		void EEReasonNameFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void EEFunctionChanged(IInspectable CR, TextChangedEventArgs CR);
		void EEFunctionFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void EEConfirm(IInspectable CR, RoutedEventArgs CR);
		void EEBTheoremNameChanged(IInspectable CR, TextChangedEventArgs CR);
		void EEBTheoremNameFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void EEBReasonNameChanged(IInspectable CR, TextChangedEventArgs CR);
		void EEBReasonNameFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void EEBConfirm(IInspectable CR, RoutedEventArgs CR);
		void ETTheoremNameChanged(IInspectable CR, TextChangedEventArgs CR);
		void ETTheoremNameFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void ETidAChanged(IInspectable CR, TextChangedEventArgs CR);
		void ETidAFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void ETidBChanged(IInspectable CR, TextChangedEventArgs CR);
		void ETidBFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void ETConfirm(IInspectable CR, RoutedEventArgs CR);
		void ERTheoremNameChanged(IInspectable CR, TextChangedEventArgs CR);
		void ERTheoremNameFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void ERReasonNameChanged(IInspectable CR, TextChangedEventArgs CR);
		void ERReasonNameFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void ERConfirm(IInspectable CR, RoutedEventArgs CR);
		void ChoicesOperationCategoryChosen(IInspectable CR, SelectionChangedEventArgs CR);
		void C0IDChanged(IInspectable CR, TextChangedEventArgs CR);
		void C0IDFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void C0idChanged(IInspectable CR, TextChangedEventArgs CR);
		void C0idFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void C0aChanged(IInspectable CR, TextChangedEventArgs CR);
		void C0aFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void C0bChanged(IInspectable CR, TextChangedEventArgs CR);
		void C0bFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void C0Confirm(IInspectable CR, RoutedEventArgs CR);
		void C1IDChanged(IInspectable CR, TextChangedEventArgs CR);
		void C1IDFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void C1idChanged(IInspectable CR, TextChangedEventArgs CR);
		void C1idFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void C1aChanged(IInspectable CR, TextChangedEventArgs CR);
		void C1aFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void C1bChanged(IInspectable CR, TextChangedEventArgs CR);
		void C1bFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void C1Confirm(IInspectable CR, RoutedEventArgs CR);
		void C2IDChanged(IInspectable CR, TextChangedEventArgs CR);
		void C2IDFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void C2idAChanged(IInspectable CR, TextChangedEventArgs CR);
		void C2idAFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void C2idBChanged(IInspectable CR, TextChangedEventArgs CR);
		void C2idBFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void C2Confirm(IInspectable CR, RoutedEventArgs CR);
		void C3IDChanged(IInspectable CR, TextChangedEventArgs CR);
		void C3IDFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void C3idChanged(IInspectable CR, TextChangedEventArgs CR);
		void C3idFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void C3Confirm(IInspectable CR, RoutedEventArgs CR);
		void UQOperationCategoryChosen(IInspectable CR, SelectionChangedEventArgs CR);
		void UFIDChanged(IInspectable CR, TextChangedEventArgs CR);
		void UFIDFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void UFidChanged(IInspectable CR, TextChangedEventArgs CR);
		void UFidFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void UFaChanged(IInspectable CR, TextChangedEventArgs CR);
		void UFaFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void UFConfirm(IInspectable CR, RoutedEventArgs CR);
		void UTIDChanged(IInspectable CR, TextChangedEventArgs CR);
		void UTIDFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void UTidChanged(IInspectable CR, TextChangedEventArgs CR);
		void UTidFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void UTtChanged(IInspectable CR, TextChangedEventArgs CR);
		void UTtFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void UTConfirm(IInspectable CR, RoutedEventArgs CR);
		void ScopeOperationCategoryChosen(IInspectable CR, SelectionChangedEventArgs CR);
		void ScopeNameChanged(IInspectable CR, TextChangedEventArgs CR);
		void ScopeNameFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void ScopeConfirm(IInspectable CR, RoutedEventArgs CR);
		void AssumeNameChanged(IInspectable CR, TextChangedEventArgs CR);
		void AssumeNameFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void AssumeTheoremNameChanged(IInspectable CR, TextChangedEventArgs CR);
		void AssumeTheoremNameFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void AssumeTheoremChanged(IInspectable CR, TextChangedEventArgs CR);
		void AssumeTheoremFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void AssumeConfirm(IInspectable CR, RoutedEventArgs CR);
		void ArbitraryObjectScopeNameChanged(IInspectable CR, TextChangedEventArgs CR);
		void ArbitraryObjectScopeNameFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void ArbitraryObjectNameChanged(IInspectable CR, TextChangedEventArgs CR);
		void ArbitraryObjectNameFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void ArbitraryObjectTypeChanged(IInspectable CR, TextChangedEventArgs CR);
		void ArbitraryObjectTypeFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void ArbitraryObjectConfirm(IInspectable CR, RoutedEventArgs CR);
		void ArbitraryTypeScopeNameChanged(IInspectable CR, TextChangedEventArgs CR);
		void ArbitraryTypeScopeNameFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void ArbitraryTypeNameChanged(IInspectable CR, TextChangedEventArgs CR);
		void ArbitraryTypeNameFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void ArbitraryTypeConfirm(IInspectable CR, RoutedEventArgs CR);
		void ExportTheoremChanged(IInspectable CR, TextChangedEventArgs CR);
		void ExportTheoremFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void ExportConfirm(IInspectable CR, RoutedEventArgs CR);
		void ExitConfirm(IInspectable CR, RoutedEventArgs CR);
		fire_and_forget ImportClick(IInspectable CR, RoutedEventArgs CR);
		void CodeKeyDown(IInspectable CR, KeyRoutedEventArgs CR args);
		void CodeConfirm(IInspectable CR, RoutedEventArgs CR);
		void CombinedOperationCategoryChosen(IInspectable CR, SelectionChangedEventArgs CR);
		void EIRTEID0Changed(IInspectable CR, TextChangedEventArgs CR);
		void EIRTEID0Finished(IInspectable CR, KeyRoutedEventArgs CR args);
		void EIRTEID1Changed(IInspectable CR, TextChangedEventArgs CR);
		void EIRTEID1Finished(IInspectable CR, KeyRoutedEventArgs CR args);
		void EIRTEID2Changed(IInspectable CR, TextChangedEventArgs CR);
		void EIRTEID2Finished(IInspectable CR, KeyRoutedEventArgs CR args);
		void EIRTEID3Changed(IInspectable CR, TextChangedEventArgs CR);
		void EIRTEID3Finished(IInspectable CR, KeyRoutedEventArgs CR args);
		void EIRTEidAChanged(IInspectable CR, TextChangedEventArgs CR);
		void EIRTEidAFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void EIRTEidBChanged(IInspectable CR, TextChangedEventArgs CR);
		void EIRTEidBFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void EIRTEConfirm(IInspectable CR, RoutedEventArgs CR);
		void CUFID0Changed(IInspectable CR, TextChangedEventArgs CR);
		void CUFID0Finished(IInspectable CR, KeyRoutedEventArgs CR args);
		void CUFID1Changed(IInspectable CR, TextChangedEventArgs CR);
		void CUFID1Finished(IInspectable CR, KeyRoutedEventArgs CR args);
		void CUFID2Changed(IInspectable CR, TextChangedEventArgs CR);
		void CUFID2Finished(IInspectable CR, KeyRoutedEventArgs CR args);
		void CUFID3Changed(IInspectable CR, TextChangedEventArgs CR);
		void CUFID3Finished(IInspectable CR, KeyRoutedEventArgs CR args);
		void CUFID4Changed(IInspectable CR, TextChangedEventArgs CR);
		void CUFID4Finished(IInspectable CR, KeyRoutedEventArgs CR args);
		void CUFID5Changed(IInspectable CR, TextChangedEventArgs CR);
		void CUFID5Finished(IInspectable CR, KeyRoutedEventArgs CR args);
		void CUFidChanged(IInspectable CR, TextChangedEventArgs CR);
		void CUFidFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void CUFaChanged(IInspectable CR, TextChangedEventArgs CR);
		void CUFaFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void CUFConfirm(IInspectable CR, RoutedEventArgs CR);
		void CUTID0Changed(IInspectable CR, TextChangedEventArgs CR);
		void CUTID0Finished(IInspectable CR, KeyRoutedEventArgs CR args);
		void CUTID1Changed(IInspectable CR, TextChangedEventArgs CR);
		void CUTID1Finished(IInspectable CR, KeyRoutedEventArgs CR args);
		void CUTID2Changed(IInspectable CR, TextChangedEventArgs CR);
		void CUTID2Finished(IInspectable CR, KeyRoutedEventArgs CR args);
		void CUTID3Changed(IInspectable CR, TextChangedEventArgs CR);
		void CUTID3Finished(IInspectable CR, KeyRoutedEventArgs CR args);
		void CUTID4Changed(IInspectable CR, TextChangedEventArgs CR);
		void CUTID4Finished(IInspectable CR, KeyRoutedEventArgs CR args);
		void CUTID5Changed(IInspectable CR, TextChangedEventArgs CR);
		void CUTID5Finished(IInspectable CR, KeyRoutedEventArgs CR args);
		void CUTidChanged(IInspectable CR, TextChangedEventArgs CR);
		void CUTidFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void CUTtChanged(IInspectable CR, TextChangedEventArgs CR);
		void CUTtFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void CUTConfirm(IInspectable CR, RoutedEventArgs CR);
		void CEEID0Changed(IInspectable CR, TextChangedEventArgs CR);
		void CEEID0Finished(IInspectable CR, KeyRoutedEventArgs CR args);
		void CEEID1Changed(IInspectable CR, TextChangedEventArgs CR);
		void CEEID1Finished(IInspectable CR, KeyRoutedEventArgs CR args);
		void CEEID2Changed(IInspectable CR, TextChangedEventArgs CR);
		void CEEID2Finished(IInspectable CR, KeyRoutedEventArgs CR args);
		void CEEID3Changed(IInspectable CR, TextChangedEventArgs CR);
		void CEEID3Finished(IInspectable CR, KeyRoutedEventArgs CR args);
		void CEEID4Changed(IInspectable CR, TextChangedEventArgs CR);
		void CEEID4Finished(IInspectable CR, KeyRoutedEventArgs CR args);
		void CEEID5Changed(IInspectable CR, TextChangedEventArgs CR);
		void CEEID5Finished(IInspectable CR, KeyRoutedEventArgs CR args);
		void CEEidChanged(IInspectable CR, TextChangedEventArgs CR);
		void CEEidFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void CEEpChanged(IInspectable CR, TextChangedEventArgs CR);
		void CEEpFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void CEEfChanged(IInspectable CR, TextChangedEventArgs CR);
		void CEEfFinished(IInspectable CR, KeyRoutedEventArgs CR args);
		void CEEConfirm(IInspectable CR, RoutedEventArgs CR);

	private:
		weak_ref<MainPageP> self, parent;
		unordered_map<hstring, MainPageP> children;
		weak_ref<TabViewItem> position;
		weak_ref<FileRootP> root;
		hstring header;
		ScopeCategory category;
		LinkedMapP objects, types, theorems;
		bool exited;
		TheoremP assumption = nullptr;
		ObjP aO = nullptr;
		TypeP aT = nullptr;
		vector<pair<TheoremP, TheoremPanelP>> to_export;
		unordered_set<hstring> exported;
		Flyout error_flyout;

		[[nodiscard]] bool CheckObjectName(hstring CR s) const;
		[[nodiscard]] bool CheckTypeName(hstring CR s) const;
		[[nodiscard]] bool CheckTheoremName(hstring CR s) const;
		[[nodiscard]] bool CheckScopeName(hstring CR s) const;
		[[nodiscard]] bool CheckStatus() const;
		static bool IsValidName(wchar_t CR ch);
		static bool IsValidTypeExpression(wchar_t CR ch);
		static void RemoveIllegal(TextBox CR box);
		static void RemoveIllegal(TextBox CR box, auto CR check);
		static OperationP MakeOperation(OperationCategory CR _category, initializer_list<hstring> _contents);
		OperationP OperationObject(param::hstring CR _name, param::hstring CR _expression);
		OperationP OperationType(param::hstring CR _name, param::hstring CR _expression);
		OperationP OperationCopy(param::hstring CR ID, param::hstring CR id);
		OperationP OperationFunction(param::hstring CR ID, param::hstring CR _param, param::hstring CR _image, param::hstring CR _arg);
		OperationP OperationTemplate(param::hstring CR ID, param::hstring CR _param, param::hstring CR _image, param::hstring CR _arg);
		OperationP OperationEI(param::hstring CR ID, param::hstring CR a);
		OperationP OperationEIB(param::hstring CR ID, param::hstring CR id);
		OperationP OperationEIF(param::hstring CR ID, param::hstring CR id);
		OperationP OperationEIT(param::hstring CR ID, param::hstring CR id);
		OperationP OperationEE(param::hstring CR ID, param::hstring CR id, param::hstring CR f);
		OperationP OperationEEB(param::hstring CR ID, param::hstring CR id);
		OperationP OperationET(param::hstring CR ID, param::hstring CR idA, param::hstring CR idB);
		OperationP OperationER(param::hstring CR ID, param::hstring CR id);
		OperationP OperationC0(param::hstring CR ID, param::hstring CR id, param::hstring CR a, param::hstring CR b);
		OperationP OperationC1(param::hstring CR ID, param::hstring CR id, param::hstring CR a, param::hstring CR b);
		OperationP OperationC2(param::hstring CR ID, param::hstring CR idA, param::hstring CR idB);
		OperationP OperationC3(param::hstring CR ID, param::hstring CR id);
		OperationP OperationUF(param::hstring CR ID, param::hstring CR id, param::hstring CR a);
		OperationP OperationUT(param::hstring CR ID, param::hstring CR id, param::hstring CR t);
		OperationP OperationScope(param::hstring CR NAME);
		OperationP OperationAssume(param::hstring CR NAME, param::hstring CR ID, param::hstring CR p);
		OperationP OperationArbitraryObject(param::hstring CR NAME, param::hstring CR name, param::hstring CR t);
		OperationP OperationArbitraryType(param::hstring CR NAME, param::hstring CR name);
		OperationP OperationExport(param::hstring CR ID);
		OperationP OperationExit();
		ObjP MakeObject(hstring CR s, UIElement CR _position);
		TypeP MakeType(hstring CR s, UIElement CR _position);
		[[nodiscard]] ObjP RemoveCurrent(ObjP CR _original, UIElement CR _position, MainPageP CR _page_position, ObjP CR replaceO, TypeP CR replaceT) const;
		void SimpleError(param::hstring CR _id, param::hstring CR _whole, size_t CR _position) const;
		void ComplexError(param::hstring CR _id, param::hstring CR _name, param::hstring CR _whole, size_t CR _position) const;
		void InvalidReason() const;
		void ObjectNameExist(param::hstring CR _name) const;
		void TypeNameExist(param::hstring CR _name) const;
		void TheoremNameExist(param::hstring CR _name) const;
		void ScopeNameExist(param::hstring CR _name) const;
		void TheoremNotFound(param::hstring CR _name) const;
		[[nodiscard]] ObjP FetchObject(param::hstring CR _key, UIElement CR _position) const;
		[[nodiscard]] TypeP FetchType(param::hstring CR _key, UIElement CR _position) const;
		[[nodiscard]] TheoremP FetchTheorem(param::hstring CR _key, UIElement CR _position) const;
		static bool CheckIllegal(wstring CR s);
		static bool CheckIllegal(wstring CR s, auto CR check);
	};
}

namespace winrt::Logic_Playground::factory_implementation
{
	struct MainPage : MainPageT<MainPage, implementation::MainPage>
	{
	};
}
