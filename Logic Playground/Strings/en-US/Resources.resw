<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AppTitle" xml:space="preserve">
    <value>Logic Playground</value>
  </data>
  <data name="addButton.Label" xml:space="preserve">
    <value>New</value>
  </data>
  <data name="Dark.Content" xml:space="preserve">
    <value>Dark</value>
  </data>
  <data name="languageBlock.Text" xml:space="preserve">
    <value>Language</value>
  </data>
  <data name="Light.Content" xml:space="preserve">
    <value>Light</value>
  </data>
  <data name="NewTab" xml:space="preserve">
    <value>New Tab</value>
  </data>
  <data name="openButton.Label" xml:space="preserve">
    <value>Open</value>
  </data>
  <data name="recentBlock.Text" xml:space="preserve">
    <value>Recent Files</value>
  </data>
  <data name="setButton.Label" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="Settings" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="settingsTitle.Text" xml:space="preserve">
    <value>Settings (Take effect on the next startup)</value>
  </data>
  <data name="System.Content" xml:space="preserve">
    <value>Use system setting</value>
  </data>
  <data name="themeBlock.Text" xml:space="preserve">
    <value>Theme</value>
  </data>
  <data name="OpenFilePickerFailure" xml:space="preserve">
    <value>Oops, the file picker failed to start 😵‍💫</value>
  </data>
  <data name="文件.Text" xml:space="preserve">
    <value>File</value>
  </data>
  <data name="保存.Text" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="另存为.Text" xml:space="preserve">
    <value>Save as</value>
  </data>
  <data name="导入.Content" xml:space="preserve">
    <value>Import</value>
  </data>
  <data name="未命名" xml:space="preserve">
    <value>Untitled</value>
  </data>
  <data name="编辑.Text" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="撤销.Text" xml:space="preserve">
    <value>Undo</value>
  </data>
  <data name="重做.Text" xml:space="preserve">
    <value>Redo</value>
  </data>
  <data name="上一级.Label" xml:space="preserve">
    <value>Parent</value>
  </data>
  <data name="OpenFileFailure" xml:space="preserve">
    <value>Oops, cannot open the chosen file 😵‍💫</value>
  </data>
  <data name="确认按钮.Content" xml:space="preserve">
    <value>Confirm</value>
  </data>
  <data name="Go to definition" xml:space="preserve">
    <value>Go to definition</value>
  </data>
  <data name="Open here" xml:space="preserve">
    <value>Open here</value>
  </data>
  <data name="Open in new tab" xml:space="preserve">
    <value>Open in new tab</value>
  </data>
  <data name="非类型名称" xml:space="preserve">
    <value> does not name a type.</value>
  </data>
  <data name="错误消息.Text" xml:space="preserve">
    <value>Error Message: </value>
  </data>
  <data name="错误位置.Text" xml:space="preserve">
    <value>Error position: </value>
  </data>
  <data name="类型符号错误" xml:space="preserve">
    <value>Types should occur on both sides of a type operator.</value>
  </data>
  <data name="类型连接错误" xml:space="preserve">
    <value>Two types should be connected with an operator.</value>
  </data>
  <data name="缺少左括号" xml:space="preserve">
    <value>The brackets do not match (left bracket missing).</value>
  </data>
  <data name="缺少右括号" xml:space="preserve">
    <value>The brackets do not match (right bracket missing).</value>
  </data>
  <data name="Open.Text" xml:space="preserve">
    <value>Open</value>
  </data>
  <data name="Remove.Text" xml:space="preserve">
    <value>Remove Item</value>
  </data>
  <data name="RemoveItem" xml:space="preserve">
    <value>Remove Item</value>
  </data>
  <data name="Recovery.Header" xml:space="preserve">
    <value>Recover unsaved files</value>
  </data>
  <data name="别名.Content" xml:space="preserve">
    <value>Aliases</value>
  </data>
  <data name="函数和模板.Content" xml:space="preserve">
    <value>Functions &amp; Templates</value>
  </data>
  <data name="等于.Content" xml:space="preserve">
    <value>Equalities</value>
  </data>
  <data name="选择.Content" xml:space="preserve">
    <value>Choices</value>
  </data>
  <data name="全称量词.Content" xml:space="preserve">
    <value>Universal Quantifications</value>
  </data>
  <data name="范围.Content" xml:space="preserve">
    <value>Scopes</value>
  </data>
  <data name="物体.Content" xml:space="preserve">
    <value>Object</value>
  </data>
  <data name="非物体名称" xml:space="preserve">
    <value> does not name an object.</value>
  </data>
  <data name="物体符号错误" xml:space="preserve">
    <value>Objects should occur on both sides of an object operator except "!".</value>
  </data>
  <data name="物体连接错误" xml:space="preserve">
    <value>Two objects should be connected with an operator.</value>
  </data>
  <data name="全称量词错误" xml:space="preserve">
    <value>Invalid operand for "!".</value>
  </data>
  <data name="函数模板错误" xml:space="preserve">
    <value>Invalid operand for "#".</value>
  </data>
  <data name="等于错误" xml:space="preserve">
    <value>Operands of "=" are of different types.</value>
  </data>
  <data name="选择错误" xml:space="preserve">
    <value>The first operand of "?" should be of type "bool".</value>
  </data>
  <data name="选项错误" xml:space="preserve">
    <value>The second and third operand of "?" should be of the same type.</value>
  </data>
  <data name="已声明为物体" xml:space="preserve">
    <value> has been declared as an object.</value>
  </data>
  <data name="此处不应有类型" xml:space="preserve">
    <value>Unexpected type.</value>
  </data>
  <data name="此处不应有物体" xml:space="preserve">
    <value>Unexpected object.</value>
  </data>
  <data name="此处不应有参数" xml:space="preserve">
    <value>Unexpected parameter.</value>
  </data>
  <data name="函数错误" xml:space="preserve">
    <value>The argument's type does not match the function.</value>
  </data>
  <data name="已声明为类型" xml:space="preserve">
    <value> has been declared as a type.</value>
  </data>
  <data name="函数定义错误" xml:space="preserve">
    <value>Invalid Operand for "@".</value>
  </data>
  <data name="此处应有参数" xml:space="preserve">
    <value>Expect a parameter.</value>
  </data>
  <data name="“:”前不应是表达式" xml:space="preserve">
    <value>An expression should not occur on the left of ":".</value>
  </data>
  <data name="三元运算符“?”要有三元" xml:space="preserve">
    <value>Ternary operator "?" needs three operands.</value>
  </data>
  <data name="复制.Content" xml:space="preserve">
    <value>Copy Theorem</value>
  </data>
  <data name="无法写入文件" xml:space="preserve">
    <value>Failed to write into the file.</value>
  </data>
  <data name="文件读取错误" xml:space="preserve">
    <value>The file contains errors; the software only read data up to the point before the first error occurred.</value>
  </data>
  <data name="读取文件失败" xml:space="preserve">
    <value>Failed to read the file.</value>
  </data>
  <data name="ReplaceFailure" xml:space="preserve">
    <value>Failed to replace the original file.</value>
  </data>
  <data name="OpenOriginalFailure" xml:space="preserve">
    <value>Failed to open the original file.</value>
  </data>
  <data name="OpenSaveFailure" xml:space="preserve">
    <value>Failed to open the file for recovery.</value>
  </data>
  <data name="是否保存" xml:space="preserve">
    <value>Save your work?</value>
  </data>
  <data name="是" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="否" xml:space="preserve">
    <value>Discard</value>
  </data>
  <data name="取消" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="MoreInformation.Text" xml:space="preserve">
    <value>For more information, please refer to the documents.</value>
  </data>
  <data name="函数.Content" xml:space="preserve">
    <value>Function</value>
  </data>
  <data name="模板.Content" xml:space="preserve">
    <value>Template</value>
  </data>
  <data name="Copy" xml:space="preserve">
    <value>Copy</value>
  </data>
  <data name="依据不合要求" xml:space="preserve">
    <value>The basis do not meet the requirements</value>
  </data>
  <data name="非焦点" xml:space="preserve">
    <value>It is forbidden to operate in a scope that is not focused on.</value>
  </data>
  <data name="普通范围.Content" xml:space="preserve">
    <value>Regular Scope</value>
  </data>
  <data name="假设.Content" xml:space="preserve">
    <value>Assume</value>
  </data>
  <data name="任意物体.Content" xml:space="preserve">
    <value>Arbitrary Object</value>
  </data>
  <data name="任意类型.Content" xml:space="preserve">
    <value>Arbitrary Type</value>
  </data>
  <data name="导出.Content" xml:space="preserve">
    <value>Export</value>
  </data>
  <data name="选择文件.Content" xml:space="preserve">
    <value>Select files</value>
  </data>
  <data name="NotATheorem" xml:space="preserve">
    <value> cannot be viewed as a theorem.</value>
  </data>
  <data name="离开.Content" xml:space="preserve">
    <value>Exit</value>
  </data>
  <data name="无母" xml:space="preserve">
    <value>The current scope does not have its parent scope.</value>
  </data>
  <data name="导航到上一级" xml:space="preserve">
    <value>Navigate to parent</value>
  </data>
  <data name="导航到" xml:space="preserve">
    <value>Navigate to </value>
  </data>
  <data name="未知错误" xml:space="preserve">
    <value>An unknown error has occurred.</value>
  </data>
  <data name="冲突" xml:space="preserve">
    <value>Name collision.</value>
  </data>
  <data name="TheoremNameExist" xml:space="preserve">
    <value> has been defined as a theorem.</value>
  </data>
  <data name="ObjectNameExist" xml:space="preserve">
    <value> has been defined as an object.</value>
  </data>
  <data name="TypeNameExist" xml:space="preserve">
    <value> has been defined as a type.</value>
  </data>
  <data name="ScopeNameExist" xml:space="preserve">
    <value> has been defined as a scope.</value>
  </data>
  <data name="NotATheoremName" xml:space="preserve">
    <value> does not name a theorem.</value>
  </data>
  <data name="EmptyParameterName" xml:space="preserve">
    <value> Parameter name cannot be empty.</value>
  </data>
  <data name="类型.Content" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="不属于当前范围" xml:space="preserve">
    <value> does not belong to the current scope.</value>
  </data>
  <data name="已导出" xml:space="preserve">
    <value> has been exported.</value>
  </data>
  <data name="代码.Content" xml:space="preserve">
    <value>Code</value>
  </data>
  <data name="未知操作" xml:space="preserve">
    <value>Unknown operation.</value>
  </data>
  <data name="请稍候……" xml:space="preserve">
    <value>Just a moment...</value>
  </data>
  <data name="组合操作.Content" xml:space="preserve">
    <value>Combined Operations</value>
  </data>
  <data name="WebSite.Text" xml:space="preserve">
    <value>Website</value>
  </data>
  <data name="Feedback.Content" xml:space="preserve">
    <value>Feedback</value>
  </data>
  <data name="Documentation.Text" xml:space="preserve">
    <value>Documentation</value>
  </data>
</root>